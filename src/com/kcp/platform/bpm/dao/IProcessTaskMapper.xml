<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.kcp.platform.bpm.dao.IProcessTaskMapper">
	<resultMap id="processTaskMapper" type="com.kcp.platform.bpm.entity.ProcessTask">
		<id property="id" column="ID_" jdbcType="VARCHAR"/>
		<result property="revision" column="REV_" jdbcType="INTEGER"/>
		<result property="name" column="NAME_" jdbcType="VARCHAR"/>
		<result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
		<result property="description" column="DESCRIPTION_" jdbcType="VARCHAR"/>
		<result property="priority" column="PRIORITY_" jdbcType="INTEGER"/>
		<result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
		<result property="owner" column="OWNER_" jdbcType="VARCHAR"/>
		<result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR"/>
		<result property="delegationState" column="DELEGATION_" jdbcType="VARCHAR"/>
		<result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
		<result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
		<result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
		<result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
		<result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
		<result property="subject" column="subject" jdbcType="VARCHAR"/>
		<result property="processName" column="processName" jdbcType="VARCHAR"/>
		<result property="allowDivert" column="allowDivert" jdbcType="NUMERIC"/>
		<result property="ischeck" column="ischeck" jdbcType="NUMERIC"/>
		<result property="defId" column="defId" jdbcType="VARCHAR"/>
		<result property="runId" column="runId" jdbcType="VARCHAR"/>
		<result property="allowBatchApprove" column="allowBatchApprove" jdbcType="NUMERIC"/>
		<result property="typeName" column="typeName" jdbcType="VARCHAR"/>
		<result property="orgName" column="orgName" jdbcType="VARCHAR"/>
		<result property="tagIds" column="tagIds" jdbcType="VARCHAR" />
		<result property="creatorId" column="creatorId" jdbcType="VARCHAR" />
		<result property="creator" column="creator" jdbcType="VARCHAR" />
		<result property="taskStatus" column="taskStatus" jdbcType="NUMERIC"/>  
	</resultMap>
	
	<insert id="addTask" parameterType="com.kcp.platform.bpm.entity.ProcessTask">
	    INSERT INTO ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_,
	                      ASSIGNEE_, DELEGATION_, EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_KEY_, DUE_DATE_)
	    VALUES (#{id, jdbcType=VARCHAR},
	            1,
	            #{name, jdbcType=VARCHAR},
	            #{parentTaskId, jdbcType=VARCHAR},
	            #{description, jdbcType=VARCHAR},
	            #{priority, jdbcType=INTEGER},
	            #{createTime, jdbcType=TIMESTAMP},
	            #{owner, jdbcType=VARCHAR},
	            #{assignee, jdbcType=VARCHAR},
	            #{delegationState, jdbcType=VARCHAR},
	            #{executionId, jdbcType=VARCHAR},
	            #{processInstanceId, jdbcType=VARCHAR},
	            #{processDefinitionId, jdbcType=VARCHAR},
	            #{taskDefinitionKey, jdbcType=VARCHAR},
	            #{dueDate, jdbcType=TIMESTAMP}
	           )
	</insert>
	 <update id="updateTaskExecution" parameterType="String">
		 update act_ru_task set execution_id_ =PROC_INST_ID_ where id_=#{id, jdbcType=VARCHAR}
	</update> 
  
	<update id="setDueDate" parameterType="java.util.Map">
		UPDATE ACT_RU_TASK SET DUE_DATE_=#{dueDate} WHERE ID_=#{taskId}
	</update>
	
	<select id="getTasksByRunId" resultMap="processTaskMapper">
		SELECT TASK.*, RUN.SUBJECT as subject, RUN.PROCESS_NAME as processName
		  FROM ACT_RU_TASK TASK
		  LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
		 WHERE RUN.RUN_ID = #{runId}
	</select>
	
	
	<select id="getByTaskNameOrTaskIds" resultMap="processTaskMapper">
		SELECT DISTINCT TASK.*,RUN.SUBJECT subject,RUN.PROCESS_NAME processName
			FROM ACT_RU_TASK TASK LEFT JOIN BPM_PRO_RUN RUN
			ON TASK.PROC_INST_ID_=RUN.ACT_INST_ID
			where TASK.ASSIGNEE_ = #{userId} 
				and ( TASK.NAME_ like '%'||#{taskName}||'%' 
					or  TASK.ID_ in 
					<foreach collection="array" item="taskId"  open="(" separator="," close=")">  
				        #{taskId}
				   </foreach>
				ORDER BY TASK.CREATE_TIME_ DESC
	</select>
	
	<update id="updateTaskAssignee">
		UPDATE ACT_RU_TASK SET ASSIGNEE_=#{userId} where ID_=#{taskId}
	</update>
	
	<update id="updateTaskDescription">
		UPDATE ACT_RU_TASK SET DESCRIPTION_=#{description} where ID_=#{taskId}
	</update>
	
	<!-- 设置执行人为空 -->
	<update id="updateTaskAssigneeNull">
		UPDATE ACT_RU_TASK SET ASSIGNEE_=null where ID_=#{taskId}
	</update>
	
	<!-- 修改taskKey -->
	<update id="updateNewTaskDefKeyByInstIdNodeId">
		UPDATE ACT_RU_TASK SET TASK_DEF_KEY_=#{newTaskDefKey} WHERE PROC_INST_ID_=#{actInstId} AND TASK_DEF_KEY_=#{oldTaskDefKey}
	</update>
	
	<!-- 修改taskKey -->
	<update id="updateOldTaskDefKeyByInstIdNodeId">
		update ACT_RU_TASK set TASK_DEF_KEY_=#{oldTaskDefKey} where PROC_INST_ID_=#{actInstId} and TASK_DEF_KEY_ like #{newTaskDefKey}
	</update>
	
	<select id="updateTaskOwner">
		UPDATE ACT_RU_TASK SET OWNER_=#{userId} where ID_=#{taskId}
	</select>
	
	<select id="getByTaskId" resultMap="processTaskMapper">
		SELECT distinct task.*,run.subject subject,run.PROCESS_NAME processName
		FROM ACT_RU_TASK task left join BPM_PRO_RUN run
		ON task.PROC_INST_ID_=run.ACT_INST_ID where task.ID_=#{taskId}
	</select>
	
	<select id="getByInstanceId" resultMap="processTaskMapper">
		SELECT * FROM ACT_RU_TASK task where  task.PROC_INST_ID_=#{instanceId} and EXECUTION_ID_ IS NOT NULL
	</select>
	
	<delete id="delByInstanceId">
		DELETE FROM ACT_RU_TASK  where PROC_INST_ID_=#{instanceId}
	</delete>
	
	<delete id="delCandidateByInstanceId">
		DELETE FROM ACT_RU_IDENTITYLINK  WHERE TASK_ID_ IN(  SELECT A.ID_ FROM ACT_RU_TASK A where A.PROC_INST_ID_=#{instanceId})
	</delete>
	
	<delete id="delCandidateByActDefId">
		DELETE FROM ACT_RU_IDENTITYLINK  WHERE PROC_INST_ID_ IN(  SELECT A.PROC_INST_ID_ FROM ACT_RU_TASK A where A.PROC_DEF_ID_=#{actDefId})
	</delete>
	
	<delete id="delById">
		DELETE FROM ACT_RU_TASK  where ID_=#{id}
	</delete>
	
	<select id="getHasCandidateExecutor" resultType="java.util.HashMap">
		SELECT COUNT(*) AMOUNT,t.task_id_ TASKID FROM act_ru_identitylink t  where 
				t.task_id_ in 
					<foreach collection="array" item="taskId"  open="(" separator="," close=")">  
				        #{taskId}
				   </foreach>
				group by t.task_id_
	</select>
	
	<update id="updateTask">
		UPDATE ACT_RU_TASK set ASSIGNEE_=#{userId},DESCRIPTION_=#{description}, CREATE_TIME_=SYSDATE where ID_=#{taskId}
	</update>
	
	<!-- 删除指定人某个节点的沟通任务 -->
	<delete id="delCommuTaskByInstNodeUser" >
		delete from ACT_RU_TASK  where proc_inst_id_=#{proInstId} and task_def_key_=#{nodeId} and assignee_=#{userId}
		and  description_='15'
	</delete>
	
	<!-- 删除某个任务的沟通任务 -->
	<delete id="delCommuTaskByParentTaskId" >
		delete from ACT_RU_TASK where ACT_RU_TASK.parent_task_id_=#{parentTaskId} and  ACT_RU_TASK.description_='15'
	</delete>
		
	<!-- 删除指定parentTaskId的流转任务 -->
	<delete id="delTransToTaskByParentTaskId" >
		delete from ACT_RU_TASK where ACT_RU_TASK.parent_task_id_=#{parentTaskId} and  ACT_RU_TASK.description_='38'
	</delete>
	
	<select id="getByInstanceIdTaskDefKey" resultMap="processTaskMapper">
		SELECT * FROM ACT_RU_TASK task where task.PROC_INST_ID_=#{instanceId} and task.TASK_DEF_KEY_ =#{taskDefKey} and task.description_ ='-1'  and task.parent_task_id_ is null 
	</select>
	
	<select id="getByParentTaskIdAndDesc" resultMap="processTaskMapper">
		SELECT * FROM ACT_RU_TASK task where task.description_ =#{description}  and task.parent_task_id_ =#{parentTaskId} 
	</select>
	
	<select id="getTaskByActDefId" resultMap="processTaskMapper">
		SELECT * FROM ACT_RU_TASK task where  task.PROC_INST_ID_=#{instanceId} ORDER BY CREATE_TIME_ DESC
	</select>
	
	<delete id="delByActDefId">
		DELETE FROM ACT_RU_TASK WHERE PROC_DEF_ID_ = #{actDefId}
	</delete>
	
	<select id="getAllTask" parameterType="hashMap" resultMap="processTaskMapper">
		SELECT TASK.*, RUN.SUBJECT subject, RUN.PROCESS_NAME processName
		  FROM ACT_RU_TASK TASK
		  LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
		  LEFT JOIN BPM_DEFINITION DEF ON TASK.PROC_DEF_ID_ = DEF.ACT_DEF_ID
		 WHERE 1 = 1
		   AND DEF.STATUS != 3
			<if test="name!=null and name!=''"> AND TASK.NAME_ LIKE '%'||#{name}||'%' </if>
			<if test="subject!=null and subject!=''"> AND RUN.SUBJECT LIKE '%'||#{subject}||'%' </if>
			<if test="processName!=null and processName!=''"> AND RUN.processName LIKE '%'||#{processName}||'%' </if>
			ORDER BY TASK.CREATE_TIME_ DESC
	</select>
	<select id="getMyTask" parameterType="hashMap" resultMap="processTaskMapper">
		SELECT DISTINCT *
			  FROM (SELECT TASK.*,
			               RUN.SUBJECT subject,
			               RUN.PROCESS_NAME processName,
			               TYPE.ID typeId,
			               TYPE.CATALOG_NAME typeName,
			               RUN.CREATOR,
			               RUN.CREATOR_ID creatorId,
			               (CASE WHEN TREAD.ID IS NULL THEN 0 ELSE 1 END) hasRead,
			               RUN.STATUS taskStatus
			          FROM ACT_RU_TASK TASK
			          LEFT JOIN BPM_TASK_READ TREAD ON TASK.ID_ = TREAD.TASK_ID
			                                       AND TREAD.USER_ID = #{userId}
			          LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
			          LEFT JOIN BPM_CATALOG TYPE ON TYPE.ID = RUN.TYPE_ID
			          LEFT JOIN BPM_DEFINITION DEF ON TASK.PROC_DEF_ID_ = DEF.ACT_DEF_ID
			         WHERE TASK.ASSIGNEE_ = #{userId}
			           AND TASK.DESCRIPTION_ != '39'
			           AND DEF.STATUS != 3
			        UNION ALL
			        SELECT TASK.*,
			               RUN.SUBJECT subject,
			               RUN.PROCESS_NAME processName,
			               TYPE.ID typeId,
			               TYPE.CATALOG_NAME typeName,
			               RUN.CREATOR,
			               RUN.CREATOR_ID creatorId,
			               (CASE WHEN TREAD.ID IS NULL THEN 0 ELSE 1 END) hasRead,
			               RUN.STATUS taskStatus
			          FROM ACT_RU_TASK TASK
			          JOIN ACT_RU_IDENTITYLINK IDENT ON TASK.ID_ = IDENT.TASK_ID_
			          LEFT JOIN BPM_TASK_READ TREAD ON TASK.ID_ = TREAD.TASK_ID
			                                       AND TREAD.USER_ID = #{userId}
			          LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
			          LEFT JOIN BPM_CATALOG TYPE ON TYPE.ID = RUN.TYPE_ID
			          LEFT JOIN BPM_DEFINITION DEF ON TASK.PROC_DEF_ID_ = DEF.ACT_DEF_ID
			         WHERE IDENT.USER_ID_ = #{userId}
			           AND TASK.ASSIGNEE_ = 0
			           AND TASK.DESCRIPTION_ != '39'
			           AND DEF.STATUS != 3
			        UNION ALL
			        SELECT TASK.*,
			               RUN.SUBJECT subject,
			               RUN.PROCESS_NAME processName,
			               TYPE.ID typeId,
			               TYPE.CATALOG_NAME typeName,
			               RUN.CREATOR,
			               RUN.CREATOR_ID creatorId,
			               (CASE WHEN TREAD.ID IS NULL THEN 0 ELSE 1 END) hasRead,
			               RUN.STATUS taskStatus
			          FROM ACT_RU_TASK TASK
			          JOIN ACT_RU_IDENTITYLINK IDENT ON TASK.ID_ = IDENT.TASK_ID_
			          LEFT JOIN BPM_TASK_READ TREAD ON TASK.ID_ = TREAD.TASK_ID
			                                       AND TREAD.USER_ID = #{userId}
			          LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
			          LEFT JOIN BPM_CATALOG TYPE ON TYPE.ID = RUN.TYPE_ID
			          LEFT JOIN BPM_DEFINITION DEF ON TASK.PROC_DEF_ID_ = DEF.ACT_DEF_ID
			         WHERE IDENT.TYPE_ = 'org'
			           AND IDENT.GROUP_ID_ IN
			               (SELECT U.SSDW_ZJID
			                  FROM TB_YHXX U
			                 WHERE U.ZJID = #{userId})
			           AND TASK.ASSIGNEE_ = 0
			           AND TASK.DESCRIPTION_ != '39'
			           AND DEF.STATUS != 3
			        UNION ALL
			        SELECT TASK.*,
			              RUN.SUBJECT subject,
			               RUN.PROCESS_NAME processName,
			               TYPE.ID typeId,
			               TYPE.CATALOG_NAME typeName,
			               RUN.CREATOR,
			               RUN.CREATOR_ID creatorId,
			               (CASE WHEN TREAD.ID IS NULL THEN 0 ELSE 1 END) hasRead,
			               RUN.STATUS taskStatus
			          FROM ACT_RU_TASK TASK
			          JOIN ACT_RU_IDENTITYLINK IDENT ON TASK.ID_ = IDENT.TASK_ID_
			          LEFT JOIN BPM_TASK_READ TREAD ON TASK.ID_ = TREAD.TASK_ID
			                                       AND TREAD.USER_ID = #{userId}
			          LEFT JOIN BPM_PRO_RUN RUN ON TASK.PROC_INST_ID_ = RUN.ACT_INST_ID
			          LEFT JOIN BPM_CATALOG TYPE ON TYPE.ID = RUN.TYPE_ID
			          LEFT JOIN BPM_DEFINITION DEF ON TASK.PROC_DEF_ID_ = DEF.ACT_DEF_ID
			         WHERE IDENT.TYPE_ = 'role'
			           AND IDENT.GROUP_ID_ IN
			               (SELECT UR.JSXX_ZJID
			                  FROM TB_YHXX_R_JSXX UR
			                 WHERE UR.YHXX_ZJID = #{userId})
			           AND TASK.ASSIGNEE_ = 0
			           AND TASK.DESCRIPTION_ != '39'
			           AND DEF.STATUS != 3) TMP
			           WHERE 1=1
						<if test="subject!=null and subject!=''">and upper(tmp.subject) LIKE '%'||#{subject}||'%'</if>
						<if test="processName!=null and processName!=''"> AND upper(tmp.processName) LIKE '%'||#{processName}||'%' </if>
						<if test="creator!=null and creator!=''">AND tmp.creator LIKE '%'||#{creator}||'%' </if>
						<if test="taskStatus!=null and taskStatus!=''">AND tmp.taskStatus = #{taskStatus} </if>
						<if test="description!=null and description!=''">AND tmp.description_ = #{description} </if>
						<if test="hasRead!=null and hasRead!=''">AND tmp.hasRead = #{hasRead} </if>
						<if test="startTime!=null">and tmp.CREATE_TIME_>=#{startTime,jdbcType=TIMESTAMP}</if>
						<if test="endTime!=null">and tmp.CREATE_TIME_ &lt;= #{endTime,jdbcType=TIMESTAMP}</if>
						ORDER BY TMP.CREATE_TIME_ DESC
	</select>
</mapper>
